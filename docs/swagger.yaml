basePath: /
definitions:
  models.Contact:
    description: Modèle complet d'une demande de contact
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      message:
        type: string
      subject:
        type: string
      submittedAt:
        type: string
    required:
    - email
    - firstName
    - lastName
    - message
    - subject
    type: object
  models.ContactCreate:
    description: modèle pour créer une demande de contact
    properties:
      email:
        example: jean.dupont@exemple.com
        type: string
      firstName:
        example: Jean
        type: string
      lastName:
        example: Dupont
        type: string
      message:
        example: J'aimerais avoir plus d'informations sur vos services.
        type: string
      subject:
        example: Demande d'information
        type: string
    required:
    - email
    - firstName
    - lastName
    - message
    - subject
    type: object
  models.PasswordUpdate:
    description: modèle pour mettre à jour le mot de passe d'un utilisateur
    properties:
      newPassword:
        example: NouveauMotdepasse123
        minLength: 6
        type: string
      oldPassword:
        example: AncienMotdepasse123
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  models.UserCreate:
    description: model for create a user
    properties:
      email:
        example: utilisateur@exemple.com
        type: string
      password:
        example: Motdepasse123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: API pour le projet PEC2 Backend
  title: API PEC2 Backend
  version: "1.0"
paths:
  /contact:
    post:
      consumes:
      - application/json
      description: Submit a new contact request with the provided information
      parameters:
      - description: Contact information
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/models.ContactCreate'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: Contact request submitted successfully, id: contact
            ID'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: Error message'
          schema:
            additionalProperties: true
            type: object
      summary: Create a new contact request
      tags:
      - contacts
  /contacts:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all contact requests (Admin access only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.Contact'
              type: array
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden - Admin access required'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Error message'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all contact requests (Admin)
      tags:
      - contacts
  /login:
    post:
      consumes:
      - application/json
      description: user login with credential
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: User created successfully, email: user email'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: Wrong credentials or email not verified'
          schema:
            additionalProperties: true
            type: object
        "422":
          description: 'error: JWT not generated'
          schema:
            additionalProperties: true
            type: object
      summary: user login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: User created successfully, email: user email'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: Invalid input'
          schema:
            additionalProperties: true
            type: object
        "409":
          description: 'error: Email already exists'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: Error message'
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all users (Admin access only)
      produces:
      - application/json
      responses:
        "200":
          description: 'users: array of user objects'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden - Admin access required'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: error message'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all users (Admin)
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by their ID
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'user: user object'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: Invalid user ID'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: error message'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by ID
      tags:
      - users
  /users/password:
    put:
      consumes:
      - application/json
      description: Update user's password by verifying the old password and setting
        a new one
      parameters:
      - description: Password update information
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.PasswordUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Password updated successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Invalid request'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Invalid old password'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Error updating password'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - users
  /users/profile:
    put:
      consumes:
      - multipart/form-data
      description: Update the current authenticated user's profile information with
        optional profile picture
      parameters:
      - description: Username
        in: formData
        name: username
        type: string
      - description: Biography
        in: formData
        name: bio
        type: string
      - description: Email address
        in: formData
        name: email
        type: string
      - description: Profile picture image file
        in: formData
        name: profilePicture
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Profile updated successfully, user: updated user
            object'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: Invalid request data'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Error updating profile'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /valid-email/{token}:
    get:
      consumes:
      - application/json
      description: After create account, user valid it email
      parameters:
      - description: JWT Token sent in the URL
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message": "User validate account'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: User already validated account'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: user not found or can''t decode JWT'
          schema:
            additionalProperties: true
            type: object
      summary: Validation email
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: 'Entrez le JWT avec le préfixe Bearer: Bearer <JWT>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
