{
    "swagger": "2.0",
    "info": {
        "description": "API pour le projet PEC2 Backend",
        "title": "API PEC2 Backend",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8090",
    "basePath": "/",
    "paths": {
        "/categories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get all categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new category with the provided information",
                "consumes": [
                    "multipart/form-data",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Create a new category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Category picture",
                        "name": "picture",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "description": "Category data (for JSON requests)",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.CategoryCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a category with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Update a category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Category name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Category picture (optional)",
                        "name": "picture",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Category not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a category by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Delete a category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Category deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Category not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/contact": {
            "post": {
                "description": "Submit a new contact request with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Create a new contact request",
                "parameters": [
                    {
                        "description": "Contact information",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContactCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: Contact request submitted successfully, id: contact ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/contacts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all contact requests (Admin access only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Get all contact requests (Admin)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Contact"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/contacts/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the status of a contact request (Admin access only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contacts"
                ],
                "summary": "Update contact status (Admin)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status update information",
                        "name": "statusUpdate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContactStatusUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Contact status updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Contact not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/content-creators": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing content creator application (rejected or approved)",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content-creators"
                ],
                "summary": "Update a content creator application",
                "parameters": [
                    {
                        "type": "string",
                        "default": "My Creative Company",
                        "description": "Company name",
                        "name": "companyName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "SARL",
                        "description": "Company type",
                        "name": "companyType",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "12345678901234",
                        "description": "SIRET number",
                        "name": "siretNumber",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "FR12345678901",
                        "description": "VAT number",
                        "name": "vatNumber",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "123 Business Street",
                        "description": "Street address",
                        "name": "streetAddress",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "75001",
                        "description": "Postal code",
                        "name": "postalCode",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Paris",
                        "description": "City",
                        "name": "city",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "France",
                        "description": "Country",
                        "name": "country",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "FR7630006000011234567890189",
                        "description": "IBAN",
                        "name": "iban",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "BNPAFRPP",
                        "description": "BIC",
                        "name": "bic",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Document proof (PDF, image)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Application updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "error: Application cannot be updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "error: No application found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submit an application to become a content creator",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content-creators"
                ],
                "summary": "Apply to become a content creator",
                "parameters": [
                    {
                        "type": "string",
                        "default": "My Creative Company",
                        "description": "Company name",
                        "name": "companyName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "SARL",
                        "description": "Company type",
                        "name": "companyType",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "12345678901234",
                        "description": "SIRET number",
                        "name": "siretNumber",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "FR12345678901",
                        "description": "VAT number",
                        "name": "vatNumber",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "123 Business Street",
                        "description": "Street address",
                        "name": "streetAddress",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "75001",
                        "description": "Postal code",
                        "name": "postalCode",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Paris",
                        "description": "City",
                        "name": "city",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "France",
                        "description": "Country",
                        "name": "country",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "FR7630006000011234567890189",
                        "description": "IBAN",
                        "name": "iban",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "BNPAFRPP",
                        "description": "BIC",
                        "name": "bic",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Document proof (PDF, image)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: Application submitted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "error: Application already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/content-creators/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all content creator applications (Admin access only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content-creators"
                ],
                "summary": "Get all content creator applications (Admin)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ContentCreatorInfo"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/content-creators/stats/creator": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "statistic for followers and subscribers for one creator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content-creators"
                ],
                "summary": "Get general statistiques",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "subscribers stats?",
                        "name": "isSubscriberSearch",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistics successfully retrieved",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/content-creators/{id}/status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the status of a content creator application (Admin access only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "content-creators"
                ],
                "summary": "Update content creator application status (Admin)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Content Creator Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContentCreatorStatusUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Status updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Content creator application not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/insee/{siret}": {
            "get": {
                "description": "Get Entreprise Info",
                "tags": [
                    "insee"
                ],
                "summary": "Get Entreprise Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Siret",
                        "name": "siret",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/insee.EntrepriseInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "user login with credential",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "user login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "token: JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: Wrong credentials or email not verified",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "422": {
                        "description": "error: JWT not generated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "description": "Retrieve all posts with optional filtering and pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get all posts",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter by free posts",
                        "name": "isFree",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by user",
                        "name": "userIs",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by current user following",
                        "name": "homeFeed",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by current user active subscriptions",
                        "name": "subscriptionFeed",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by category IDs (can provide multiple)",
                        "name": "categories",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "posts and pagination info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new post with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Post description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Is the post free",
                        "name": "isFree",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Is the post enabled",
                        "name": "enable",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Category IDs",
                        "name": "categories",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Post picture",
                        "name": "file",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Post"
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/reports": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all reports with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get all reports (Admin only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Report"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics about posts by day and by category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get post statistics (Admin)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "total: total number of posts, daily_data: array of daily post creation data, category_data: array of posts by category",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid date parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error retrieving statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/{id}": {
            "get": {
                "description": "Retrieve a post by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get a post by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PostResponse"
                        }
                    },
                    "404": {
                        "description": "error: Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a post with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Post name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Post description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Is the post free",
                        "name": "isFree",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Is the post enabled",
                        "name": "enable",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Category IDs",
                        "name": "categories",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Post picture",
                        "name": "file",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Post"
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a post by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Post deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/{id}/comments": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new comment and broadcast it via SSE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Create a new comment for a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT Token for web clients (optional)",
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "description": "Comment content",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Comment created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/{id}/comments/sse": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Connect to SSE to receive comments in real-time for a specific post",
                "tags": [
                    "comments"
                ],
                "summary": "Handle SSE connection for comments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT Token for web clients (optional)",
                        "name": "token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connected to SSE",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Invalid post ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error setting up SSE",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/{id}/like": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add or remove a like on a post",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Toggle like on a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Like added/removed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/posts/{id}/report": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Report a post for inappropriate content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Report a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Report reason",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReportCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/private-messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all messages sent and received by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "private-messages"
                ],
                "summary": "Get user messages",
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PrivateMessage"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error retrieving messages",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send a private message from the authenticated user to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "private-messages"
                ],
                "summary": "Create a private message",
                "parameters": [
                    {
                        "description": "Message information",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PrivateMessageCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created message",
                        "schema": {
                            "$ref": "#/definitions/models.PrivateMessage"
                        }
                    },
                    "400": {
                        "description": "error: Invalid request data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Receiver not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error creating message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/private-messages/received": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all messages received by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "private-messages"
                ],
                "summary": "Get received messages",
                "responses": {
                    "200": {
                        "description": "List of received messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error retrieving messages",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/private-messages/sent": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all messages sent by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "private-messages"
                ],
                "summary": "Get sent messages",
                "responses": {
                    "200": {
                        "description": "List of sent messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error retrieving messages",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/private-messages/{id}/read": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark a specific private message as read",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "private-messages"
                ],
                "summary": "Mark message as read",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Message marked as read",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Message not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error updating message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Create a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: User created successfully, email: user email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "error: Email already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/subscriptions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return all the subscriptions (active, canceled, history) of the connected user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "List the user's subscriptions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Subscription"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/checkout/{contentCreatorId}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a Stripe payment to subscribe to a content creator (verified role). Returns the Stripe session ID to use on the frontend.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Create a Stripe Checkout session for subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the content creator",
                        "name": "contentCreatorId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "sessionId: ID of the Stripe Checkout session, url: Stripe Checkout URL",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Can only subscribe to a content creator",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Stripe error or server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/revenue": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the total amount and daily breakdown of successful subscription payments between two dates (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get the total revenue of the site",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "total: total amount in cents, daily_data: array of daily revenue data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Access denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/top-creators": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the top 3 content creators with the most active subscriptions (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get top 3 content creators by active subscriptions",
                "responses": {
                    "200": {
                        "description": "Top creators with their subscription count",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Access denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{creatorId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a Stripe subscription for a content creator and update its status in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Cancel a subscription for a content creator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the content creator",
                        "name": "creatorId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Subscription canceled successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: You are not authorized to cancel this subscription",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Subscription not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error when canceling the Stripe subscription",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return the detailed information of a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Details of a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the subscription",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: You are not authorized to view this subscription",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Subscription not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user-settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the settings for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-settings"
                ],
                "summary": "Get user settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_settings.UserSettingsResponse"
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the settings for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-settings"
                ],
                "summary": "Update user settings",
                "parameters": [
                    {
                        "description": "Settings to update",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_settings.UpdateSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_settings.UserSettingsResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all users (Admin access only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users (Admin)",
                "responses": {
                    "200": {
                        "description": "users: array of user objects",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/followers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Liste tous les utilisateurs qui suivent l'utilisateur authentifié",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Liste des followers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of user search (not required)",
                        "name": "userSearch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of followers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/followings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all users that the authenticated user follows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List of users followed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of user search (not required)",
                        "name": "userSearch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users followed",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/id/{id}/follow-counts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return the number of followers and followings for a given user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Number of followers and followings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "userId, followers, followings",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user's password by verifying the old password and setting a new one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "description": "Password update information",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PasswordUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Password updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Invalid old password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error updating password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/password/reset/confirm": {
            "post": {
                "description": "Change the password if the code is correct and not expired",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Reset password with a code",
                "parameters": [
                    {
                        "description": "Email, code, new password",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.PasswordResetConfirm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Password reset",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Invalid data or code incorrect/expired",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/password/reset/request": {
            "post": {
                "description": "send a reset password code to the email if the user exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "send a reset password code",
                "parameters": [
                    {
                        "description": "Email of the user",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Code sent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "user: user object",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error retrieving profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the current authenticated user's profile information with optional profile picture",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserName",
                        "name": "userName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "First name",
                        "name": "firstName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last name",
                        "name": "lastName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Biography",
                        "name": "bio",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Email address",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Sexe",
                        "name": "sexe",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "BirthDayDate",
                        "name": "birthDayDate",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Profile picture image file",
                        "name": "profilePicture",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Profile updated successfully, user: updated user object",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid request data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error updating profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get count of new users by day between start and end dates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user statistics (Admin)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "total: total number of users, daily_data: array of daily user registration data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid date parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error retrieving statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/stats/gender": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the count of users for each gender (Admin access only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user gender statistics (Admin)",
                "responses": {
                    "200": {
                        "description": "Gender counts",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/stats/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the count of users for each role (Admin access only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user role statistics (Admin)",
                "responses": {
                    "200": {
                        "description": "Role counts",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}/follow": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated user to follow another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Follow a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to follow",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Follow successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "error: Already followed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated user to unfollow another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Unfollow a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to unfollow",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Unfollow successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found or follow does not exist",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{username}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Find user by userName",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Find user by userName",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search userName",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User is found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Invalid request data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error retrieving profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/valid-email/{token}": {
            "get": {
                "description": "Resend validation email for users who loose their code or code is expired",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Resend Validation email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user send email for received new mail",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\": \"send email at user email address",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: User already validated account",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginRequest": {
            "description": "model for user login",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "utilisateur@exemple.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Motdepasse123"
                }
            }
        },
        "insee.EntrepriseInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "company_name": {
                    "type": "string"
                },
                "company_type": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "siret": {
                    "type": "string"
                }
            }
        },
        "models.Category": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pictureUrl": {
                    "type": "string"
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Post"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.CategoryCreate": {
            "type": "object",
            "required": [
                "name",
                "pictureUrl"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "pictureUrl": {
                    "type": "string"
                }
            }
        },
        "models.Contact": {
            "description": "Modèle complet d'une demande de contact",
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "message",
                "subject"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.StatusType"
                },
                "subject": {
                    "type": "string"
                },
                "submittedAt": {
                    "type": "string"
                }
            }
        },
        "models.ContactCreate": {
            "description": "modèle pour créer une demande de contact",
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "message",
                "subject"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jean.dupont@exemple.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Jean"
                },
                "lastName": {
                    "type": "string",
                    "example": "Dupont"
                },
                "message": {
                    "type": "string",
                    "example": "J'aimerais avoir plus d'informations sur vos services."
                },
                "subject": {
                    "type": "string",
                    "example": "Demande d'information"
                }
            }
        },
        "models.ContactStatusUpdate": {
            "description": "modèle pour mettre à jour le statut d'une demande de contact",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.StatusType"
                        }
                    ],
                    "example": "processing"
                }
            }
        },
        "models.ContentCreatorInfo": {
            "type": "object",
            "required": [
                "bic",
                "city",
                "companyName",
                "companyType",
                "country",
                "documentProofUrl",
                "iban",
                "postalCode",
                "siretNumber",
                "streetAddress"
            ],
            "properties": {
                "bic": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "companyType": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "documentProofUrl": {
                    "type": "string"
                },
                "iban": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "siretNumber": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.ContentCreatorStatusType"
                },
                "streetAddress": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "vatNumber": {
                    "type": "string"
                }
            }
        },
        "models.ContentCreatorStatusType": {
            "type": "string",
            "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED"
            ],
            "x-enum-varnames": [
                "ContentCreatorStatusPending",
                "ContentCreatorStatusApproved",
                "ContentCreatorStatusRejected"
            ]
        },
        "models.ContentCreatorStatusUpdate": {
            "description": "modèle pour mettre à jour le statut d'une demande de content creator",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ContentCreatorStatusType"
                        }
                    ],
                    "example": "APPROVED"
                }
            }
        },
        "models.Like": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.MessageStatusType": {
            "type": "string",
            "enum": [
                "UNREAD",
                "READ",
                "ARCHIVED",
                "DELETED"
            ],
            "x-enum-varnames": [
                "MessageStatusUnread",
                "MessageStatusRead",
                "MessageStatusArchived",
                "MessageStatusDeleted"
            ]
        },
        "models.PasswordUpdate": {
            "description": "modèle pour mettre à jour le mot de passe d'un utilisateur",
            "type": "object",
            "required": [
                "newPassword",
                "oldPassword"
            ],
            "properties": {
                "newPassword": {
                    "type": "string",
                    "minLength": 6,
                    "example": "NouveauMotdepasse123"
                },
                "oldPassword": {
                    "type": "string",
                    "example": "AncienMotdepasse123"
                }
            }
        },
        "models.Post": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Category"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "isFree": {
                    "type": "boolean"
                },
                "likes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Like"
                    }
                },
                "name": {
                    "type": "string"
                },
                "pictureUrl": {
                    "type": "string"
                },
                "reports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Report"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.PostResponse": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Category"
                    }
                },
                "commentEnabled": {
                    "type": "boolean"
                },
                "commentsCount": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "isFree": {
                    "type": "boolean"
                },
                "likesCount": {
                    "type": "integer"
                },
                "messageEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "pictureUrl": {
                    "type": "string"
                },
                "reportsCount": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.UserInfo"
                }
            }
        },
        "models.PrivateMessage": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "receiverId": {
                    "type": "string"
                },
                "senderId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.MessageStatusType"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.PrivateMessageCreate": {
            "description": "model for creating a private message",
            "type": "object",
            "required": [
                "content",
                "receiverUserName"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "receiverUserName": {
                    "type": "string"
                }
            }
        },
        "models.Report": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "reason": {
                    "$ref": "#/definitions/models.ReportReason"
                },
                "reportedBy": {
                    "type": "string"
                }
            }
        },
        "models.ReportCreate": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "reason": {
                    "$ref": "#/definitions/models.ReportReason"
                }
            }
        },
        "models.ReportReason": {
            "type": "string",
            "enum": [
                "DISLIKE",
                "HARASSMENT",
                "SELF_HARM",
                "VIOLENCE",
                "RESTRICTED_ITEMS",
                "NUDITY",
                "SCAM",
                "MISINFORMATION",
                "ILLEGAL_CONTENT"
            ],
            "x-enum-varnames": [
                "DISLIKE",
                "HARASSMENT",
                "SELF_HARM",
                "VIOLENCE",
                "RESTRICTED_ITEMS",
                "NUDITY",
                "SCAM",
                "MISINFORMATION",
                "ILLEGAL_CONTENT"
            ]
        },
        "models.Role": {
            "type": "string",
            "enum": [
                "ADMIN",
                "USER",
                "CONTENT_CREATOR"
            ],
            "x-enum-varnames": [
                "AdminRole",
                "UserRole",
                "ContentCreator"
            ]
        },
        "models.Sexe": {
            "type": "string",
            "enum": [
                "MAN",
                "WOMAN",
                "OTHER"
            ],
            "x-enum-varnames": [
                "Male",
                "Female",
                "Other"
            ]
        },
        "models.StatusType": {
            "type": "string",
            "enum": [
                "open",
                "processing",
                "closed",
                "rejected"
            ],
            "x-enum-varnames": [
                "StatusOpen",
                "StatusProcessing",
                "StatusClosed",
                "StatusRejected"
            ]
        },
        "models.Subscription": {
            "type": "object",
            "properties": {
                "contentCreatorId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.SubscriptionStatus"
                },
                "stripeSubscriptionId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.SubscriptionStatus": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "CANCELED",
                "PENDING"
            ],
            "x-enum-varnames": [
                "SubscriptionActive",
                "SubscriptionCanceled",
                "SubscriptionPending"
            ]
        },
        "models.User": {
            "type": "object",
            "required": [
                "birthDayDate",
                "email",
                "firstName",
                "lastName",
                "password",
                "sexe",
                "userName"
            ],
            "properties": {
                "ConfirmationCodeEnd": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "birthDayDate": {
                    "type": "string"
                },
                "commentsEnable": {
                    "type": "boolean"
                },
                "confirmationCode": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "emailVerifiedAt": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "messageEnable": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "profilePicture": {
                    "type": "string"
                },
                "resetPasswordCode": {
                    "type": "string"
                },
                "resetPasswordCodeEnd": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "sexe": {
                    "$ref": "#/definitions/models.Sexe"
                },
                "siret": {
                    "type": "string"
                },
                "stripeCustomerId": {
                    "type": "string"
                },
                "subscriptionEnable": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "models.UserCreate": {
            "description": "model for create a user",
            "type": "object",
            "required": [
                "birthDayDate",
                "email",
                "firstName",
                "lastName",
                "password",
                "sexe",
                "userName"
            ],
            "properties": {
                "birthDayDate": {
                    "type": "string",
                    "example": "1990-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "utilisateur@exemple.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Jean"
                },
                "lastName": {
                    "type": "string",
                    "example": "Dupont"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Motdepasse123"
                },
                "sexe": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Sexe"
                        }
                    ],
                    "example": "MAN"
                },
                "userName": {
                    "type": "string",
                    "example": "utilisateur123"
                }
            }
        },
        "models.UserInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "profilePicture": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "user_settings.UpdateSettingsRequest": {
            "type": "object",
            "properties": {
                "commentEnabled": {
                    "type": "boolean"
                },
                "messageEnabled": {
                    "type": "boolean"
                },
                "subscriptionEnabled": {
                    "type": "boolean"
                }
            }
        },
        "user_settings.UserSettingsResponse": {
            "type": "object",
            "properties": {
                "commentEnabled": {
                    "type": "boolean"
                },
                "messageEnabled": {
                    "type": "boolean"
                },
                "subscriptionEnabled": {
                    "type": "boolean"
                }
            }
        },
        "users.PasswordResetConfirm": {
            "description": "Email, code et nouveau mot de passe pour confirmer la réinitialisation",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "123456"
                },
                "email": {
                    "type": "string",
                    "example": "utilisateur@exemple.com"
                },
                "newPassword": {
                    "type": "string",
                    "example": "NouveauMotdepasse123"
                }
            }
        },
        "users.PasswordResetRequest": {
            "description": "Email pour demander un code de réinitialisation",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "utilisateur@exemple.com"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Entrez le JWT avec le préfixe Bearer: Bearer \u003cJWT\u003e",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}